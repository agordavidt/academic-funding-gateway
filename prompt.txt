User Stories
Admin User
* Data Import: As an admin, I want to upload a CSV file with student data, so that I can quickly onboard students to the platform.
* Payment Tracking: As an admin, I want to see which students have paid the acceptance fee, so that I know who is ready to proceed with their application.
* Application Review: As an admin, I want to review submitted applications and see the student's need assessment, so that I can make an informed decision about the grant.
* Status Update: As an admin, I want to update a student's application status to "Accepted," so that I can move them to the next phase of enrollment.
* Communication: As an admin, I want the system to automatically send an email and SMS to a student when their status is changed, so they are promptly notified.
Student User
* Login: As a student, I want to log in with my phone number, so that I can easily access my profile.
* Profile Completion: As a student, I want to complete my profile with all the required information, so that my application is ready for review.
* Payment: As a student, I want to pay the N3,000 acceptance fee, so that I can access the grant application form.
* Need Assessment: As a student, I want to fill out a form to explain my need for the grant, so that the admin can properly assess my application.
* Status Tracking: As a student, I want to see the real-time status of my payment and application on my dashboard, so that I know where my application is in the process.
* Notifications: As a student, I want to receive email and SMS notifications for payment confirmation and admission updates, so that I am always informed.


# Academic Funding Gateway Network - Laravel 10 Project

## Project Structure and Implementation Guide

### 1. Initial Setup Commands

```bash
# Create new Laravel project
composer create-project laravel/laravel academic-funding-gateway "10.*"
cd academic-funding-gateway

# Install required packages
composer require flutterwave/flutterwave-v3 league/csv maatwebsite/excel
composer require twilio/sdk --with-all-dependencies
composer require mailgun/mailgun-php

# Install development dependencies
composer require --dev laravel/telescope barryvdh/laravel-debugbar

# Generate application key
php artisan key:generate

# Create symbolic link for storage
php artisan storage:link
```

### 2. Environment Configuration (.env)

```env
APP_NAME="Academic Funding Gateway"
APP_ENV=production
APP_KEY=base64:your-key-here
APP_DEBUG=false
APP_URL=https://your-domain.com

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=error

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=academic_funding_gateway
DB_USERNAME=your_username
DB_PASSWORD=your_password

BROADCAST_DRIVER=log
CACHE_DRIVER=redis
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database
SESSION_DRIVER=database
SESSION_LIFETIME=120

# Flutterwave Configuration
FLUTTERWAVE_SECRET_KEY=your_secret_key
FLUTTERWAVE_PUBLIC_KEY=your_public_key
FLUTTERWAVE_SECRET_HASH=your_secret_hash

# SMS Configuration (Twilio)
TWILIO_ACCOUNT_SID=your_account_sid
TWILIO_AUTH_TOKEN=your_auth_token
TWILIO_FROM_NUMBER=your_from_number

# Email Configuration (Mailgun)
MAIL_MAILER=mailgun
MAILGUN_DOMAIN=your_domain
MAILGUN_SECRET=your_secret
MAILGUN_ENDPOINT=api.mailgun.net

MAIL_FROM_ADDRESS=noreply@your-domain.com
MAIL_FROM_NAME="${APP_NAME}"

# Redis Configuration
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

# Application Settings
ACCEPTANCE_FEE=3000
MAX_GRANT_AMOUNT=500000
```

### 3. Database Migrations

#### Create Migration Files
```bash
php artisan make:migration create_users_table
php artisan make:migration create_training_institutions_table
php artisan make:migration create_applications_table
php artisan make:migration create_payments_table
php artisan make:migration create_notifications_table
php artisan make:migration create_jobs_table
php artisan make:migration create_sessions_table
```

#### Users Migration
```php
<?php
// database/migrations/2024_01_01_000000_create_users_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('phone_number', 15)->unique()->index();
            $table->string('email')->unique()->nullable()->index();
            $table->string('first_name', 100);
            $table->string('last_name', 100);
            $table->text('address')->nullable();
            $table->string('school', 255)->nullable();
            $table->string('matriculation_number', 50)->nullable();
            $table->string('state_of_origin', 100)->nullable();
            $table->string('lga', 100)->nullable();
            $table->date('date_of_birth')->nullable();
            $table->enum('gender', ['male', 'female', 'other'])->nullable();
            $table->string('bank_name', 100)->nullable();
            $table->string('account_number', 15)->nullable();
            $table->string('account_name', 100)->nullable();
            $table->string('passport_photo')->nullable();
            $table->enum('profile_completion_status', ['incomplete', 'completed'])->default('incomplete');
            $table->enum('payment_status', ['pending', 'paid', 'failed'])->default('pending');
            $table->enum('application_status', ['not_started', 'pending', 'reviewing', 'accepted', 'rejected'])->default('not_started');
            $table->timestamp('email_verified_at')->nullable();
            $table->timestamp('profile_completed_at')->nullable();
            $table->timestamp('payment_completed_at')->nullable();
            $table->timestamp('application_submitted_at')->nullable();
            $table->timestamps();
            
            // Indexes for performance
            $table->index(['payment_status', 'application_status']);
            $table->index('profile_completion_status');
        });
    }

    public function down()
    {
        Schema::dropIfExists('users');
    }
};
```

#### Training Institutions Migration
```php
<?php
// database/migrations/2024_01_01_000001_create_training_institutions_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('training_institutions', function (Blueprint $table) {
            $table->id();
            $table->string('name', 255);
            $table->text('description');
            $table->string('contact_email');
            $table->string('contact_phone', 15)->nullable();
            $table->text('address')->nullable();
            $table->string('website')->nullable();
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->json('programs_offered')->nullable();
            $table->decimal('max_grant_amount', 10, 2)->default(500000.00);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('training_institutions');
    }
};
```

#### Applications Migration
```php
<?php
// database/migrations/2024_01_01_000002_create_applications_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('applications', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->foreignId('training_institution_id')->nullable()->constrained()->nullOnDelete();
            $table->text('need_assessment_text');
            $table->json('supporting_documents')->nullable();
            $table->timestamp('terms_agreed_at');
            $table->text('admin_notes')->nullable();
            $table->text('rejection_reason')->nullable();
            $table->timestamp('reviewed_at')->nullable();
            $table->foreignId('reviewed_by')->nullable()->constrained('users')->nullOnDelete();
            $table->decimal('approved_amount', 10, 2)->nullable();
            $table->timestamps();
            
            // Indexes
            $table->index('user_id');
            $table->index('training_institution_id');
        });
    }

    public function down()
    {
        Schema::dropIfExists('applications');
    }
};
```

#### Payments Migration
```php
<?php
// database/migrations/2024_01_01_000003_create_payments_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('payments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('transaction_id', 100)->unique();
            $table->string('flutterwave_ref', 100)->unique();
            $table->decimal('amount', 10, 2);
            $table->string('currency', 3)->default('NGN');
            $table->enum('status', ['pending', 'success', 'failed', 'cancelled'])->default('pending');
            $table->enum('payment_method', ['card', 'bank_transfer', 'ussd', 'mobile_money'])->nullable();
            $table->json('gateway_response')->nullable();
            $table->timestamp('paid_at')->nullable();
            $table->timestamps();
            
            // Indexes
            $table->index(['user_id', 'status']);
            $table->index('transaction_id');
        });
    }

    public function down()
    {
        Schema::dropIfExists('payments');
    }
};
```

#### Notifications Migration
```php
<?php
// database/migrations/2024_01_01_000004_create_notifications_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('notifications', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->enum('type', ['email', 'sms', 'system'])->index();
            $table->string('subject')->nullable();
            $table->text('message_body');
            $table->enum('status', ['pending', 'sent', 'failed'])->default('pending');
            $table->json('metadata')->nullable();
            $table->timestamp('sent_at')->nullable();
            $table->text('error_message')->nullable();
            $table->integer('retry_count')->default(0);
            $table->timestamps();
            
            // Indexes
            $table->index(['user_id', 'type']);
            $table->index(['status', 'created_at']);
        });
    }

    public function down()
    {
        Schema::dropIfExists('notifications');
    }
};
```

### 4. Models

#### User Model
```php
<?php
// app/Models/User.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'phone_number', 'email', 'first_name', 'last_name', 'address',
        'school', 'matriculation_number', 'state_of_origin', 'lga',
        'date_of_birth', 'gender', 'bank_name', 'account_number',
        'account_name', 'passport_photo', 'profile_completion_status',
        'payment_status', 'application_status', 'profile_completed_at',
        'payment_completed_at', 'application_submitted_at'
    ];

    protected $hidden = ['remember_token'];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'profile_completed_at' => 'datetime',
        'payment_completed_at' => 'datetime',
        'application_submitted_at' => 'datetime',
        'date_of_birth' => 'date',
        'password' => 'hashed',
    ];

    // Relationships
    public function application()
    {
        return $this->hasOne(Application::class);
    }

    public function payments()
    {
        return $this->hasMany(Payment::class);
    }

    public function notifications()
    {
        return $this->hasMany(Notification::class);
    }

    public function latestPayment()
    {
        return $this->hasOne(Payment::class)->latest();
    }

    // Scopes
    public function scopeWithPaidFees($query)
    {
        return $query->where('payment_status', 'paid');
    }

    public function scopeWithCompletedProfile($query)
    {
        return $query->where('profile_completion_status', 'completed');
    }

    public function scopeWithApplicationStatus($query, $status)
    {
        return $query->where('application_status', $status);
    }

    // Accessors & Mutators
    public function getFullNameAttribute()
    {
        return $this->first_name . ' ' . $this->last_name;
    }

    public function setPhoneNumberAttribute($value)
    {
        $this->attributes['phone_number'] = preg_replace('/[^0-9+]/', '', $value);
    }

    // Helper Methods
    public function hasCompletedProfile(): bool
    {
        return $this->profile_completion_status === 'completed';
    }

    public function hasPaidFee(): bool
    {
        return $this->payment_status === 'paid';
    }

    public function hasSubmittedApplication(): bool
    {
        return $this->application_status !== 'not_started';
    }

    public function canSubmitApplication(): bool
    {
        return $this->hasCompletedProfile() && $this->hasPaidFee();
    }

    public function getProgressPercentage(): int
    {
        $steps = [
            $this->hasCompletedProfile(),
            $this->hasPaidFee(),
            $this->hasSubmittedApplication()
        ];
        
        return (int) ((array_sum($steps) / count($steps)) * 100);
    }
}
```

#### Application Model
```php
<?php
// app/Models/Application.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Application extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id', 'training_institution_id', 'need_assessment_text',
        'supporting_documents', 'terms_agreed_at', 'admin_notes',
        'rejection_reason', 'reviewed_at', 'reviewed_by', 'approved_amount'
    ];

    protected $casts = [
        'supporting_documents' => 'array',
        'terms_agreed_at' => 'datetime',
        'reviewed_at' => 'datetime',
        'approved_amount' => 'decimal:2'
    ];

    // Relationships
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function trainingInstitution()
    {
        return $this->belongsTo(TrainingInstitution::class);
    }

    public function reviewer()
    {
        return $this->belongsTo(User::class, 'reviewed_by');
    }

    // Scopes
    public function scopePending($query)
    {
        return $query->whereHas('user', function($q) {
            $q->where('application_status', 'pending');
        });
    }

    public function scopeReviewing($query)
    {
        return $query->whereHas('user', function($q) {
            $q->where('application_status', 'reviewing');
        });
    }

    public function scopeAccepted($query)
    {
        return $query->whereHas('user', function($q) {
            $q->where('application_status', 'accepted');
        });
    }

    public function scopeRejected($query)
    {
        return $query->whereHas('user', function($q) {
            $q->where('application_status', 'rejected');
        });
    }
}
```

#### Payment Model
```php
<?php
// app/Models/Payment.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Payment extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id', 'transaction_id', 'flutterwave_ref', 'amount',
        'currency', 'status', 'payment_method', 'gateway_response', 'paid_at'
    ];

    protected $casts = [
        'gateway_response' => 'array',
        'paid_at' => 'datetime',
        'amount' => 'decimal:2'
    ];

    // Relationships
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    // Scopes
    public function scopeSuccessful($query)
    {
        return $query->where('status', 'success');
    }

    public function scopePending($query)
    {
        return $query->where('status', 'pending');
    }

    public function scopeFailed($query)
    {
        return $query->where('status', 'failed');
    }

    // Helper Methods
    public function isSuccessful(): bool
    {
        return $this->status === 'success';
    }

    public function isPending(): bool
    {
        return $this->status === 'pending';
    }

    public function isFailed(): bool
    {
        return $this->status === 'failed';
    }
}
```

#### TrainingInstitution Model
```php
<?php
// app/Models/TrainingInstitution.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TrainingInstitution extends Model
{
    use HasFactory;

    protected $fillable = [
        'name', 'description', 'contact_email', 'contact_phone',
        'address', 'website', 'status', 'programs_offered', 'max_grant_amount'
    ];

    protected $casts = [
        'programs_offered' => 'array',
        'max_grant_amount' => 'decimal:2'
    ];

    // Relationships
    public function applications()
    {
        return $this->hasMany(Application::class);
    }

    // Scopes
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    // Helper Methods
    public function isActive(): bool
    {
        return $this->status === 'active';
    }
}
```

#### NotificationModel
```php
<?php
// app/Models/NotificationModel.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class NotificationModel extends Model
{
    use HasFactory;

    protected $table = 'notifications';

    protected $fillable = [
        'user_id', 'type', 'subject', 'message_body', 'status',
        'metadata', 'sent_at', 'error_message', 'retry_count'
    ];

    protected $casts = [
        'metadata' => 'array',
        'sent_at' => 'datetime'
    ];

    // Relationships
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    // Scopes
    public function scopeSent($query)
    {
        return $query->where('status', 'sent');
    }

    public function scopePending($query)
    {
        return $query->where('status', 'pending');
    }

    public function scopeFailed($query)
    {
        return $query->where('status', 'failed');
    }

    // Helper Methods
    public function isSent(): bool
    {
        return $this->status === 'sent';
    }

    public function canRetry(): bool
    {
        return $this->status === 'failed' && $this->retry_count < 3;
    }
}
```

### 5. Configuration Files

#### Database Configuration
```php
<?php
// config/database.php (MySQL optimization section)

'mysql' => [
    'driver' => 'mysql',
    'url' => env('DATABASE_URL'),
    'host' => env('DB_HOST', '127.0.0.1'),
    'port' => env('DB_PORT', '3306'),
    'database' => env('DB_DATABASE', 'forge'),
    'username' => env('DB_USERNAME', 'forge'),
    'password' => env('DB_PASSWORD', ''),
    'unix_socket' => env('DB_SOCKET', ''),
    'charset' => 'utf8mb4',
    'collation' => 'utf8mb4_unicode_ci',
    'prefix' => '',
    'prefix_indexes' => true,
    'strict' => true,
    'engine' => 'InnoDB',
    'options' => extension_loaded('pdo_mysql') ? array_filter([
        PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
        PDO::MYSQL_ATTR_INIT_COMMAND => 'SET sql_mode="STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"',
    ]) : [],
],
```

#### Custom Configuration File
```php
<?php
// config/funding.php

return [
    'acceptance_fee' => env('ACCEPTANCE_FEE', 3000),
    'max_grant_amount' => env('MAX_GRANT_AMOUNT', 500000),
    'currency' => 'NGN',
    
    'file_uploads' => [
        'max_size' => 2048, // KB
        'allowed_types' => ['jpg', 'jpeg', 'png', 'pdf', 'doc', 'docx'],
        'passport_photo' => [
            'max_size' => 1024,
            'allowed_types' => ['jpg', 'jpeg', 'png']
        ]
    ],
    
    'flutterwave' => [
        'secret_key' => env('FLUTTERWAVE_SECRET_KEY'),
        'public_key' => env('FLUTTERWAVE_PUBLIC_KEY'),
        'secret_hash' => env('FLUTTERWAVE_SECRET_HASH'),
        'base_url' => env('FLUTTERWAVE_BASE_URL', 'https://api.flutterwave.com/v3'),
    ],
    
    'sms' => [
        'provider' => env('SMS_PROVIDER', 'twilio'), // twilio, termii
        'twilio' => [
            'account_sid' => env('TWILIO_ACCOUNT_SID'),
            'auth_token' => env('TWILIO_AUTH_TOKEN'),
            'from_number' => env('TWILIO_FROM_NUMBER')
        ]
    ],
    
    'import' => [
        'batch_size' => 100,
        'allowed_formats' => ['csv', 'xlsx', 'json']
    ],
    
    'security' => [
        'login_attempts' => 5,
        'lockout_duration' => 15, // minutes
        'password_reset_expires' => 60, // minutes
        'session_timeout' => 120, // minutes
    ]
];
```

### 6. Service Classes

#### NotificationService
```php
<?php
// app/Services/NotificationService.php

namespace App\Services;

use App\Models\User;
use App\Models\NotificationModel;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;
use Twilio\Rest\Client as TwilioClient;
use App\Mail\ApplicationStatusMail;
use App\Mail\PaymentConfirmationMail;

class NotificationService
{
    protected $twilioClient;
    
    public function __construct()
    {
        if (config('funding.sms.provider') === 'twilio') {
            $this->twilioClient = new TwilioClient(
                config('funding.sms.twilio.account_sid'),
                config('funding.sms.twilio.auth_token')
            );
        }
    }
    
    public function sendPaymentConfirmation(User $user): bool
    {
        try {
            // Send Email
            $emailSent = $this->sendEmail($user, [
                'type' => 'payment_confirmation',
                'subject' => 'Payment Confirmation - Academic Funding Gateway',
                'mailable' => new PaymentConfirmationMail($user)
            ]);
            
            // Send SMS
            $smsSent = $this->sendSms($user, 
                "Dear {$user->first_name}, your payment of ₦" . number_format(config('funding.acceptance_fee')) . 
                " has been confirmed. You can now proceed with your grant application."
            );
            
            return $emailSent || $smsSent;
        } catch (\Exception $e) {
            Log::error('Payment confirmation notification failed', [
                'user_id' => $user->id,
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }
    
    public function sendApplicationStatusUpdate(User $user, string $status, string $additionalMessage = ''): bool
    {
        try {
            $statusMessages = [
                'reviewing' => 'Your grant application is now under review.',
                'accepted' => 'Congratulations! Your grant application has been accepted.',
                'rejected' => 'We regret to inform you that your grant application was not successful.'
            ];
            
            $message = $statusMessages[$status] ?? 'Your application status has been updated.';
            if ($additionalMessage) {
                $message .= ' ' . $additionalMessage;
            }
            
            // Send Email
            $emailSent = $this->sendEmail($user, [
                'type' => 'status_update',
                'subject' => 'Application Status Update - Academic Funding Gateway',
                'mailable' => new ApplicationStatusMail($user, $status, $message)
            ]);
            
            // Send SMS
            $smsMessage = "Dear {$user->first_name}, {$message}";
            $smsSent = $this->sendSms($user, $smsMessage);
            
            return $emailSent || $smsSent;
        } catch (\Exception $e) {
            Log::error('Status update notification failed', [
                'user_id' => $user->id,
                'status' => $status,
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }
    
    protected function sendEmail(User $user, array $data): bool
    {
        try {
            if (!$user->email) {
                return false;
            }
            
            Mail::to($user->email)->send($data['mailable']);
            
            // Log notification
            NotificationModel::create([
                'user_id' => $user->id,
                'type' => 'email',
                'subject' => $data['subject'],
                'message_body' => 'Email sent successfully',
                'status' => 'sent',
                'sent_at' => now(),
                'metadata' => ['type' => $data['type']]
            ]);
            
            return true;
        } catch (\Exception $e) {
            // Log failed notification
            NotificationModel::create([
                'user_id' => $user->id,
                'type' => 'email',
                'subject' => $data['subject'] ?? 'Email notification',
                'message_body' => 'Failed to send email',
                'status' => 'failed',
                'error_message' => $e->getMessage(),
                'metadata' => ['type' => $data['type'] ?? 'unknown']
            ]);
            
            Log::error('Email notification failed', [
                'user_id' => $user->id,
                'error' => $e->getMessage()
            ]);
            
            return false;
        }
    }
    
    protected function sendSms(User $user, string $message): bool
    {
        try {
            if (!$user->phone_number || !$this->twilioClient) {
                return false;
            }
            
            $this->twilioClient->messages->create(
                $user->phone_number,
                [
                    'from' => config('funding.sms.twilio.from_number'),
                    'body' => $message
                ]
            );
            
            // Log notification
            NotificationModel::create([
                'user_id' => $user->id,
                'type' => 'sms',
                'message_body' => $message,
                'status' => 'sent',
                'sent_at' => now()
            ]);
            
            return true;
        } catch (\Exception $e) {
            // Log failed notification
            NotificationModel::create([
                'user_id' => $user->id,
                'type' => 'sms',
                'message_body' => $message,
                'status' => 'failed',
                'error_message' => $e->getMessage()
            ]);
            
            Log::error('SMS notification failed', [
                'user_id' => $user->id,
                'error' => $e->getMessage()
            ]);
            
            return false;
        }
    }
}
```

This is just the beginning of the comprehensive Laravel application. The project includes:

1. **Proper Database Design** - Optimized migrations with indexes and foreign keys
2. **Robust Models** - With relationships, scopes, and helper methods
3. **Service Layer** - For notifications and business logic separation
4. **Security Features** - Input validation, CSRF protection, proper authentication
5. **Scalability** - Database optimization, caching strategies, queue jobs
6. **Configuration Management** - Environment-based settings

Would you like me to continue with the controllers, views, routing, payment integration, and the remaining components?